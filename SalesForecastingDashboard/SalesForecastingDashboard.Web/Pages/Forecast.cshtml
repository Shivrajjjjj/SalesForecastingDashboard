@page
@model SalesForecastingDashboard.Web.Pages.ForecastModel
@{
    ViewData["Title"] = "Sales Forecast";
}

<div class="container mt-5">
    <h2 class="text-center text-primary mb-4">Sales Forecast Dashboard</h2>

    @if (Model.Data.Length == 0)
    {
        <div class="alert alert-info text-center">
            No historical data found. Please upload or seed data from <code>wwwroot/uploads/sales_data.csv</code>.
        </div>
    }
    else
    {
        <div class="card shadow-sm mb-5">
            <div class="card-body">
                <h4 class="card-title">📈 Historical Sales vs Forecasted Sales</h4>
                <canvas id="salesChart" height="100"></canvas>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <h5 class="text-secondary">🕓 Historical Data</h5>
                <table class="table table-bordered table-sm">
                    <thead class="table-light">
                        <tr>
                            <th>Date</th>
                            <th>Sales</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.HistoricalData)
                        {
                            <tr>
                                <td>@item.Date.ToString("yyyy-MM")</td>
                                <td>@item.Sales</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-md-6">
                <h5 class="text-secondary">🔮 Forecasted Sales</h5>
                @if (Model.ForecastedSales.Length > 0)
                {
                    <ul class="list-group">
                        @for (int i = 0; i < Model.ForecastedSales.Length; i++)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Forecast @($"Month {i + 1}")
                                <span class="badge bg-success">@Model.ForecastedSales[i].ToString("F2")</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="alert alert-warning">Not enough data to forecast. Need at least 12 entries.</div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const labels = @Html.Raw(Json.Serialize(Model.Labels));
        const data = @Html.Raw(Json.Serialize(Model.Data));
        const forecast = @Html.Raw(Json.Serialize(Model.ForecastedSales));

        const ctx = document.getElementById('salesChart').getContext('2d');
        const salesChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [...labels, ...forecast.map((_, i) => `Forecast ${i + 1}`)],
                datasets: [
                    {
                        label: 'Historical Sales',
                        data: data,
                        borderColor: 'rgba(54, 162, 235, 1)',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        tension: 0.2
                    },
                    {
                        label: 'Forecasted Sales',
                        data: [...Array(data.length).fill(null), ...forecast],
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderDash: [5, 5],
                        tension: 0.2
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: false
                    }
                }
            }
        });
    </script>
}
